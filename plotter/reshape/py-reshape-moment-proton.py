# python  py-reshape-moment-proton.py


#program purpose:

# in this program, python reads SDF files generated by the EPOCH code. This file should be in the folder that contains SDF files.
# As the sizes of the SDF files are generally very big for laser-solid foil interaction, at the first step, we should compress 2D 
# physical parameters, e.g. Ex field, to reduce cells in each dimension, otherwise, during plotting we encounter memory problems 
# and plots will be partly rendered.


import sdf
import numpy as np
import sys     #exit the code at a specific line

 sdf_i= 1
 sdf_f= 20

for n in range(sdf_i,sdf_f,1):    
 nstr = str(n).zfill(4)  
 f = sdf.read(nstr +'.sdf', dict=True)
 # print (f.keys())   # print all variables (such as electric and magetic fields ...) inside each sdf file.

 print (n) 
 # sys.exit()

 ################################ READING particles_weight ##########################################

 particles_weight= f['Particles/Weight/proton'].data
 
 ################################ READING COORDINATE ##########################################

 grid_pro= f['Grid/Particles/proton'].data

 #print (len(grid_pro[0])) #.shape#[1]   # to know the dimension,eg. 2D or 3D
 #print (len(grid_pro[1]))#.shape#[1]   # to know the dimension,eg. 2D or 3D

 ###############################  READING Px  #####################################
 
  Px_pro= f['Particles/Px/proton'].data

 #print (Px_pro.shape)   
 #print (Px_pro.shape[0])  #[1]
 
 #sys.exit()
 ##############################  READING Py  ######################################
 
  Py_pro= f['Particles/Py/proton'].data
 #print (Py_pro.shape)   # to know the dimension,eg. 2D or 3D
 #print (Py_pro.shape[0])  

 #sys.exit()
 
############################### saving files

#### Py

 newFile1 = open("Py_pro" +'_sdf_'+ str(n)+'.dat', "wb")   # writing data to a binary file
 Py_pro_new1 = bytearray(Py_pro) 
 newFile1.write(Py_pro_new1)

#### Px

 newFile1 = open("Px_pro" +'_sdf_'+ str(n)+'.dat', "wb")   # writing data to a binary file
 Px_pro_new1 = bytearray(Px_pro) 
 newFile1.write(Px_pro_new1)

#### Grid

 newFile1 = open("grid_pro_x" +'_sdf_'+ str(n)+'.dat', "wb")   # writing data to a binary file
 grid_pro_new1 = bytearray(grid_pro[0]) 
 newFile1.write(grid_pro_new1)

 newFile1 = open("grid_pro_y" +'_sdf_'+ str(n)+'.dat', "wb")   # writing data to a binary file
 grid_pro_new1 = bytearray(grid_pro[1]) 
 newFile1.write(grid_pro_new1)

#### particles_weight

 newFile1 = open("particles_weight" +'_sdf_'+ str(n)+'.dat', "wb")   # writing data to a binary file
 particles_weight_new1 = bytearray(particles_weight) 
 newFile1.write(particles_weight_new1)

###############################
sys.exit()
 
